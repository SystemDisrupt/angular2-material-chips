{"version":3,"sources":["material-chips.component.ts"],"names":["core_1","require","forms_1","noop","exports","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MaterialChipsComponent","multi","this","isTagsFocused","tagsfocusedChange","EventEmitter","labelsChange","onTouchedCallback","onChangeCallback","Object","defineProperty","prototype","registerOnChange","fn","registerOnTouched","removeValue","value","index","values","indexOf","undefined","splice","emit","addValue","trim","push","labelToAdd","writeValue","onFocus","focused","console","log","focusOutFunction","__decorate","Output","Input","Component","selector","template","providers","styles"],"mappings":"sgBAAAA,OAAAC,QAO0B,iBAI1BC,QAAAD,QAAwD,kBAGlDE,KAAO,YAGAC,SAAAC,qCACTC,QAASJ,QAAAK,kBACTC,YAAaR,OAAAS,WAAW,WAAM,MAAAC,0BAC9BC,OAAO,EA8BX,IAAAD,wBAAA,WAAA,QAAAA,KAGEE,KAAAC,eAAgB,EAKND,KAAAE,kBAAoB,GAAId,QAAAe,aAElCH,KAAAI,aAAuC,GAAIhB,QAAAe,aAOnCH,KAAAK,kBAAgCd,KAChCS,KAAAM,iBAAqCf,KAwC/C,MA7CEgB,QAAAC,eAAIV,EAAAW,UAAA,mBAAJ,WACE,MAAOT,MAAKC,+CAKdH,EAAAW,UAAAC,iBAAA,SAAiBC,GAAWX,KAAKM,iBAAmBK,GACpDb,EAAAW,UAAAG,kBAAA,SAAkBD,GAAWX,KAAKK,kBAAoBM,GAItDb,EAAAW,UAAAI,YAAA,SAAYC,GACV,GAAIC,GAAQf,KAAKgB,OAAOC,QAAQH,EAAO,EAC1BI,SAATH,IACFf,KAAKgB,OAAOG,OAAOJ,EAAO,GAC1Bf,KAAKI,aAAagB,KAAKpB,KAAKgB,UAIhClB,EAAAW,UAAAY,SAAA,SAASP,GACHA,GAAwB,KAAfA,EAAMQ,SACnBtB,KAAKgB,OAAOO,KAAKT,GACjBd,KAAKI,aAAagB,KAAKpB,KAAKgB,QAC5BhB,KAAKwB,WAAa,KAIpB1B,EAAAW,UAAAgB,WAAA,SAAWX,GACHA,IAAUd,KAAKgB,SACfhB,KAAKgB,OAASF,IAItBhB,EAAAW,UAAAiB,QAAA,WACC1B,KAAK2B,QAAU,aACf3B,KAAKC,eAAgB,EACrB2B,QAAQC,IAAI,eAAgB7B,KAAKC,eACjCD,KAAKE,kBAAkBkB,KAAKpB,KAAKC,gBAElCH,EAAAW,UAAAqB,iBAAA,WACE9B,KAAK2B,QAAU,GACf3B,KAAKC,eAAgB,EACrB2B,QAAQC,IAAI,eAAgB7B,KAAKC,eACjCD,KAAKE,kBAAkBkB,KAAKpB,KAAKC,gBAhDnC8B,YAAC3C,OAAA4C,mFACDD,YAAC3C,OAAA4C,2FAGDD,YAAC3C,OAAA6C,0EAvCHnC,EAAAiC,YAAC3C,OAAA8C,WACCC,SAAU,iBACVC,SAAU,ouBAmBVC,WAAY7C,QAAAC,qCACZ6C,QAAS,2uBAKE9C,SAAAM,uBAAsBA","file":"material-chips.component.js","sourcesContent":["import { Component,\n         NgModule,\n         OnInit, \n         Input,\n         Output,\n         EventEmitter, \n         ElementRef,\n         forwardRef} from '@angular/core'\nimport {NgClass} from '@angular/common';\n\n\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\n\nconst noop = () => {\n};\n\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR : any= {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MaterialChipsComponent),\n    multi: true\n};\n\n@Component({\n  selector: 'material-chips',\n  template: `\n\n    <div *ngIf=\"values && values.length\" class=\"md-chip-list\"  [ngClass]=\"focused\">\n        <span *ngFor=\"let value of values\" class=\"md-chip\" >         \n        {{value}} <i (click)=\"removeValue(tag)\" >x</i>\n        </span>\n    \n        <span style=\"display:inline-block;\">\n        <input [(ngModel)]=\"labelToAdd\" \n        (keyup.enter)=\"addValue(box.value, $event);$event.preventDefault()\"\n        (focus)=\"onFocus()\" \n        (focusout)=\"focusOutFunction()\"  \n        #box />\n        </span>\n    </div>\n    <div *ngIf=\"!values || !values.length\">\n        <input class=\"md-chips-input\" placeholder=\"Tags\" #tbox  style=\"width:100%\" (keyup.enter)=\"addValue(tbox.value, $event);$event.preventDefault()\"/>\n    </div>\n  `,\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],\n  styles: [`\n    .md-chip{background-color:#e0e0e0;color:rgba(0,0,0,0.87)}.md-chip-list input{border:none;outline:0;background:transparent}.md-chip-list .material-icons{height:15px;width:15px;float:right;position:relative;font-size:15px;border-radius:10px;left:5px;cursor:pointer}.md-chip-list .material-icons:hover{background:gray;color:black}.md-chip-list{padding-bottom:5px;box-shadow:0 1px rgba(0,0,0,0.12)}.md-chip-list.md-focused{box-shadow:0 2px #106cc8}.md-chip{display:inline-block;padding:8px 12px 8px 12px;border-radius:16px;font-size:13px;line-height:16px}.md-chips-input{border:0;box-shadow:0 1px rgba(0,0,0,0.12);outline:0;background:transparent}.md-chips-input:focus{box-shadow:0 2px #106cc8}\n  `]\n})\n\nexport class MaterialChipsComponent implements ControlValueAccessor { \n\n  addAreaDisplayed:boolean;           \n  isTagsFocused = false;\n  values:string[];\n  labelToAdd:string;\n  focused:string;\n\n  @Output() tagsfocusedChange = new EventEmitter();\n  @Output()\n  labelsChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n  @Input()\n  get tagsfocused() {\n    return this.isTagsFocused;\n  }\n\n  private onTouchedCallback: () => void = noop;\n  private onChangeCallback: (_: any) => void = noop;\n  registerOnChange(fn: any) { this.onChangeCallback = fn;}\n  registerOnTouched(fn: any) { this.onTouchedCallback = fn;}\n\n\n\n  removeValue(value:string) {\n    var index = this.values.indexOf(value, 0);\n    if (index != undefined) {\n      this.values.splice(index, 1);\n      this.labelsChange.emit(this.values);\n    }\n  }\n\n  addValue(value:string) {\n    if(!value || value.trim()===''){return;}\n    this.values.push(value);\n    this.labelsChange.emit(this.values);\n    this.labelToAdd = '';\n  }\n  \n  //From ControlValueAccessor interface\n  writeValue(value:string[]) {\n      if (value !== this.values) {\n          this.values = value;\n      }\n  } \n\n  onFocus() {\n   this.focused = 'md-focused';\n   this.isTagsFocused = true;\n   console.log('tags focused', this.isTagsFocused)\n   this.tagsfocusedChange.emit(this.isTagsFocused)\n  }\n  focusOutFunction() {\n    this.focused = '';\n    this.isTagsFocused = false;\n    console.log('tags focused', this.isTagsFocused)\n    this.tagsfocusedChange.emit(this.isTagsFocused)\n  } \n}"]}