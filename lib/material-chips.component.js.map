{"version":3,"sources":["material-chips.component.ts"],"names":["core_1","require","forms_1","noop","exports","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MaterialChipsComponent","multi","this","isTagsFocused","tagsfocusedChange","EventEmitter","onTouchedCallback","onChangeCallback","labelsChange","addAreaDisplayed","Object","defineProperty","prototype","ngOnInit","removeValue","value","index","values","indexOf","undefined","splice","emit","addValue","push","labelToAdd","writeValue","registerOnChange","fn","registerOnTouched","onFocus","focused","console","log","focusOutFunction","__decorate","Output","Input","Component","selector","template","providers","styles"],"mappings":"sgBAAAA,OAAAC,QAO0B,iBAI1BC,QAAAD,QAAwD,kBAGlDE,KAAO,YAGAC,SAAAC,qCACTC,QAASJ,QAAAK,kBACTC,YAAaR,OAAAS,WAAW,WAAM,MAAAC,0BAC9BC,OAAO,EAYX,IAAAD,wBAAA,WAuBE,QAAAA,KApBAE,KAAAC,eAAgB,EAKND,KAAAE,kBAAoB,GAAId,QAAAe,aAS1BH,KAAAI,kBAAgCb,KAChCS,KAAAK,iBAAqCd,KAM3CS,KAAKM,aAAe,GAAIlB,QAAAe,aACxBH,KAAKO,kBAAmB,EAkD5B,MAhEEC,QAAAC,eAAIX,EAAAY,UAAA,mBAAJ,WACE,MAAOV,MAAKC,+CAgBdH,EAAAY,UAAAC,SAAA,WACEX,KAAKM,aAAe,GAAIlB,QAAAe,cAG1BL,EAAAY,UAAAE,YAAA,SAAYC,GACV,GAAIC,GAAQd,KAAKe,OAAOC,QAAQH,EAAO,EAC1BI,SAATH,IACFd,KAAKe,OAAOG,OAAOJ,EAAO,GAC1Bd,KAAKM,aAAaa,KAAKnB,KAAKe,UAIhCjB,EAAAY,UAAAU,SAAA,SAASP,GACI,KAARA,IACHb,KAAKe,OAAOM,KAAKR,GACjBb,KAAKM,aAAaa,KAAKnB,KAAKe,QAC5Bf,KAAKsB,WAAa,KAIpBxB,EAAAY,UAAAa,WAAA,SAAWV,GACHA,IAAUb,KAAKe,SACff,KAAKe,OAASF,IAItBf,EAAAY,UAAAc,iBAAA,SAAiBC,GACbzB,KAAKK,iBAAmBoB,GAI5B3B,EAAAY,UAAAgB,kBAAA,SAAkBD,GACdzB,KAAKI,kBAAoBqB,GAG7B3B,EAAAY,UAAAiB,QAAA,WACC3B,KAAK4B,QAAU,aACf5B,KAAKC,eAAgB,EACrB4B,QAAQC,IAAI,eAAgB9B,KAAKC,eACjCD,KAAKE,kBAAkBiB,KAAKnB,KAAKC,gBAElCH,EAAAY,UAAAqB,iBAAA,WACE/B,KAAK4B,QAAU,GACf5B,KAAKC,eAAgB,EACrB4B,QAAQC,IAAI,eAAgB9B,KAAKC,eACjCD,KAAKE,kBAAkBiB,KAAKnB,KAAKC,gBAjEnC+B,YAAC5C,OAAA6C,mFAEDD,YAAC5C,OAAA8C,0EAUDF,YAAC5C,OAAA6C,2FA7BHnC,EAAAkC,YAAC5C,OAAA+C,WACCC,SAAU,iBACVC,SAAU,0CACVC,WAAY9C,QAAAC,qCACZ8C,QAAS,gmBAKE/C,SAAAM,uBAAsBA","file":"material-chips.component.js","sourcesContent":["import { Component,\n         NgModule,\n         OnInit, \n         Input,\n         Output,\n         EventEmitter, \n         ElementRef,\n         forwardRef} from '@angular/core'\nimport {NgClass} from '@angular/common';\n\n\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\n\nconst noop = () => {\n};\n\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR : any= {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MaterialChipsComponent),\n    multi: true\n};\n\n@Component({\n  selector: 'material-chips',\n  template: './templates/default/material-chips.html',\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],\n  styles: [`\n    .md-chip{background-color:#e0e0e0;color:rgba(0,0,0,0.87)}.md-chip-list input{border:none;outline:0;background:transparent}.md-chip-list .material-icons{height:15px;width:15px;float:right;position:relative;font-size:15px;border-radius:10px;left:5px;cursor:pointer}.md-chip-list .material-icons:hover{background:gray;color:black}.md-chip-list{padding-bottom:5px;box-shadow:0 1px rgba(0,0,0,0.12)}.md-chip-list.md-focused{box-shadow:0 2px #106cc8}.md-chip{display:inline-block;padding:8px 12px 8px 12px;border-radius:16px;font-size:13px;line-height:16px}\n  `]\n})\n\nexport class MaterialChipsComponent implements ControlValueAccessor { \n\n  addAreaDisplayed:boolean;           \n  isTagsFocused = false;\n  values:string[];\n  labelToAdd:string;\n  focused:string;\n\n  @Output() tagsfocusedChange = new EventEmitter();\n  \n  @Input()\n  get tagsfocused() {\n    return this.isTagsFocused;\n  }\n\n  //Placeholders for the callbacks which are later provided\n  //by the Control Value Accessor\n  private onTouchedCallback: () => void = noop;\n  private onChangeCallback: (_: any) => void = noop;\n\n  @Output()\n  labelsChange: EventEmitter<string[]>;\n  \n  constructor() {\n    this.labelsChange = new EventEmitter<string[]>();\n    this.addAreaDisplayed = false;\n  }\n\n  ngOnInit() {\n    this.labelsChange = new EventEmitter<string[]>();\n  }\n\n  removeValue(value:string) {\n    var index = this.values.indexOf(value, 0);\n    if (index != undefined) {\n      this.values.splice(index, 1);\n      this.labelsChange.emit(this.values);\n    }\n  }\n\n  addValue(value:string) {\n    if(value==='')return;\n    this.values.push(value);\n    this.labelsChange.emit(this.values);\n    this.labelToAdd = '';\n  }\n  \n  //From ControlValueAccessor interface\n  writeValue(value:string[]) {\n      if (value !== this.values) {\n          this.values = value;\n      }\n  } \n  //From ControlValueAccessor interface\n  registerOnChange(fn:any) {\n      this.onChangeCallback = fn;\n  }\n\n  //From ControlValueAccessor interface\n  registerOnTouched(fn:any) {\n      this.onTouchedCallback = fn;\n  }  \n\n  onFocus() {\n   this.focused = 'md-focused';\n   this.isTagsFocused = true;\n   console.log('tags focused', this.isTagsFocused)\n   this.tagsfocusedChange.emit(this.isTagsFocused)\n  }\n  focusOutFunction() {\n    this.focused = '';\n    this.isTagsFocused = false;\n    console.log('tags focused', this.isTagsFocused)\n    this.tagsfocusedChange.emit(this.isTagsFocused)\n  } \n}"]}